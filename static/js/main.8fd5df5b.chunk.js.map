{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["suits","dragons","numbers","Array","keys","slice","deal","cards","reduce","a","v","splice","Math","floor","random","length","shuffleDeck","map","x","fill","_","Card","y","flat","filter","i","key","getKey","suit","value","free","this","id","isValidChild","card1","card2","Cardcomp","props","card","disabled","canMove","onClick","Hand","Table","children","Column","index","onCardClick","React","Component","App","getLastState","state","history","updateState","lastState","isEqual","setState","rollBackMoves","n","goBackMoves","handleColumnClick","columnIndex","cardIndex","columns","inMotion","pickedColumn","isValidMove","newColumn","concat","undefined","newInMotion","newColumns","column","handleFreeCellClick","cellIndex","freeCells","cell","newCellState","newFreeCells","handleHomeCellClick","home","newHomeState","handleFlowerClick","flower","newflower","allDragonsFree","dragon","freeDragons","some","handleDragonsClick","freeCellsNoDragon","freeIndex","indexOf","isWinningState","every","col","autoComplete","forEach","lastCard","p","f","then","Promise","resolve","homeIndex","freeCell","isWin","style","height","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8fd5df5b.chunk.js","sourcesContent":["import React from 'react';\nimport { isEqual } from 'lodash';\nimport './App.css';\n\nconst suits = ['A', 'B', 'C'];\nconst dragons = ['X', 'Y', 'Z'];\nconst numbers = [...Array(10).keys()].slice(1);\n\nconst createDeck = () => {\n  // a deck is made up of 4 of each dragon, 1-9 for each suit and a flower card\n  const cards = [\n    dragons.map(x => Array(4).fill(0).map(_ => new Card(x))),\n    suits.map(x => numbers.map(y => new Card(x, y))),\n    new Card('@'), // flower card\n  ].flat(2);\n  return cards;\n}\n\nconst shuffleDeck = cards => {\n  // https://stackoverflow.com/questions/6274339/how-can-i-shuffle-an-array\n  return cards.reduce((a, v) => a.splice(Math.floor(Math.random() * a.length), 0, v) && a, []);\n}\n\nconst deal = () => {\n  // send cards to 8 columns\n  const cards = shuffleDeck(createDeck());\n  const cols = [...Array(8).keys()];\n  const board = cols.map(x => cards.filter((_, i) => (i + x) % 8 === 0));\n  return board;\n}\n\nlet key = 0;\nconst getKey = () => ++key;\n\nclass Card {\n  constructor(suit, value=0, free=true) {\n    this.suit = suit;\n    this.value = value;\n    this.free = free;\n    this.id = getKey();\n  }\n}\n\n// card1 is valid child of card2: this means card1 and card2 are both numeric cards with different suits\n// and card1's value is exactly 1 less than card2's value\nconst isValidChild = (card1, card2) =>\n  card1.suit !== card2.suit && card1.value !== 0 && card1.value === card2.value-1;\n\nconst Cardcomp = props => {\n  if (props.card) {\n    return (\n      <button disabled={!props.canMove} onClick={props.onClick}>\n        {props.card.suit}{props.card.value || ''}\n      </button>\n    )\n  }\n  return (\n    <button onClick={props.onClick}>\n      Empty\n    </button>\n  )\n}\n\nconst Hand = props => \n  <ul>\n    {props.cards.map(card => <li key={card.id}><Cardcomp card={card} canMove={false} /></li>)}\n  </ul>  \n\nconst Table = ({children}) =>\n  <table>\n    <tbody>\n      {children}\n    </tbody>\n  </table>\n\nclass Column extends React.Component {\n  canMove(index) {\n    return index === (this.props.cards.length - 1) || \n      (isValidChild(this.props.cards[index+1], this.props.cards[index]) && this.canMove(index + 1));\n  }\n  \n  render() {\n    const cards = this.props.cards;\n    return (\n      <ul>\n        {\n          (cards.length && \n            cards.map((card, i) => \n            <li key={card.id}><Cardcomp card={card} canMove={this.canMove(i)} onClick={this.props.onCardClick(i)} /></li>))\n          || <li key={'0'}><Cardcomp card={null} onClick={this.props.onCardClick(0)} /></li>\n        }\n      </ul>\n    )\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const state = {\n      columns: deal(),\n      freeCells: [null, null, null],\n      flower: null,\n      home: suits.map(suit => new Card(suit, 0)),\n      inMotion: null,\n    }\n\n    this.state = {\n      history: [state],\n    }\n\n    // this.handleColumnClick = this.handleColumnClick.bind(this);\n    // this.handleFreeCellClick = this.handleFreeCellClick.bind(this);\n    // this.handleHomeCellClick = this.handleHomeCellClick.bind(this);\n    // this.handleFlowerClick = this.handleFlowerClick.bind(this);\n  }\n\n  getLastState = () => this.state.history.slice(-1)[0];\n\n  updateState = (state) => {\n    const {history} = this.state;\n    const lastState = history.slice(-1)[0];\n    if (isEqual(state, lastState)) {\n      return;\n    }\n    this.setState({\n      history: [...history, state]\n    });\n  }\n\n  rollBackMoves = n => () => {\n    // hard rewind to a previous state, subsequent states are lost\n    const history = this.state.history.slice(0,-n);\n    if (history.length < 1) {\n      return;\n    }\n    this.setState({\n      history: history,\n    });\n  }\n\n  goBackMoves = n => () => {\n    // previous state is accessed by adding to end of history\n    const state = this.state.history.slice(-n-1)[0];\n    this.updateState(state);\n  }\n\n  handleColumnClick = columnIndex => cardIndex => () =>{\n    const {columns, inMotion, ...state} = this.getLastState();\n    const pickedColumn = columns[columnIndex];\n    const card1 = (inMotion && inMotion[0]) || null;\n    const card2 = pickedColumn[cardIndex];\n\n    const isValidMove = () =>\n      (pickedColumn.length - 1 === cardIndex && isValidChild(card1, card2)) ||\n      pickedColumn.length === 0;\n\n    const newColumn = inMotion\n    ? isValidMove()\n      ? pickedColumn.concat(inMotion)\n      : pickedColumn\n    : pickedColumn.filter((_, i) => i < cardIndex) || [undefined];\n\n    const newInMotion = inMotion\n    ? isValidMove()\n      ? null\n      : inMotion\n    : pickedColumn.slice(cardIndex, pickedColumn.length);\n\n    const newColumns = columns.map((column, i) =>\n      columnIndex === i\n      ? newColumn\n      : column\n    )\n\n    this.updateState({\n      inMotion: newInMotion,\n      columns: newColumns,\n      ...state,\n    })\n  }\n\n  handleFreeCellClick = cellIndex => () => {\n    // if cell is empty and inMotion card length = 1, move inmotion into cell\n    // if cell is occupied and no inmotion cards, move card into inMotion * caveat doesn't work if cell contains set of dragons\n    // if cell is occupied and inMotion cards in play, do nothing\n    const {freeCells, inMotion, ...state} = this.getLastState()\n    const cell = freeCells[cellIndex];  \n    \n    const newCellState = (!cell && inMotion && inMotion.length === 1 && inMotion[0]) || \n      (inMotion && cell) ||\n      null;\n    const newInMotion = \n      (cell && inMotion) || // cell already occupied\n      (inMotion && inMotion.length > 1 && inMotion) || // hand too big to move into cell\n      (cell && [cell]) || // hand free to take cell\n      null;\n\n    const newFreeCells = freeCells.map((cell, i) => i === cellIndex ? newCellState : cell);\n\n    this.updateState({\n      freeCells: newFreeCells,\n      inMotion: newInMotion,\n      ...state,\n    })\n  }\n\n  handleHomeCellClick = cellIndex => () => {\n    const {home, inMotion, ...state} = this.getLastState()\n\n    if (!inMotion || inMotion.length !== 1) {\n      return;\n    }\n\n    const cell = home[cellIndex];\n    const card = inMotion[0];\n\n    const isValidMove = card && card.suit === cell.suit && card.value === (cell.value + 1);\n\n    const newCellState = (isValidMove && card) || cell;\n    const newInMotion = (!isValidMove && inMotion) || null;\n\n    const newHomeState = home.map((cell, i) => i === cellIndex ? newCellState : cell);\n\n    this.updateState({\n      home: newHomeState,\n      inMotion: newInMotion,\n      ...state,\n    })\n  }\n\n  handleFlowerClick = () => {\n    const {inMotion, flower, ...state} = this.getLastState()\n    if (!inMotion || inMotion[0].suit !== '@') {\n      return;\n    };\n\n    const newflower = inMotion[0];\n    const newInMotion = null;\n\n    this.updateState({\n      flower: newflower,\n      inMotion: newInMotion,\n      ...state,\n    });\n  }\n\n  allDragonsFree = dragon => {\n    const {freeCells, columns, inMotion} = this.getLastState();\n    const freeCards = freeCells.concat(columns.map(column => column.slice(-1)[0]));\n    const freeDragons = freeCards.filter(card => card && card.suit === dragon);\n    return !inMotion && \n      freeDragons.length === 4 && \n      freeCells.some(cell => cell === null || cell.suit === dragon);\n  }\n\n  handleDragonsClick = dragon => () => {\n    const {freeCells, columns, ...state} = this.getLastState();\n\n    // remove all dragon cards from table\n    const freeCellsNoDragon = freeCells.map(cell => cell && cell.suit === dragon ? null : cell);\n    const newColumns = columns.map(column =>\n      column.length && column[column.length-1].suit === dragon\n      ? column.slice(0, -1)\n      : column\n    );\n\n    // fill first free freeCell with dragons and make unmoveable\n    const freeIndex = freeCellsNoDragon.indexOf(null);\n    const newFreeCells = freeCellsNoDragon.map((cell, i) => i === freeIndex ? new Card(`${dragon}*`, 0, false) : cell);\n\n    this.updateState({\n      freeCells: newFreeCells,\n      columns: newColumns,\n      ...state,\n    });\n  }\n\n  isWinningState = () => {\n    const {columns, inMotion} = this.getLastState()\n    return !inMotion && columns.every(col => col.length===0);\n  }\n\n  autoComplete = () => {\n    // when free cards on the table are the next card for home spots, move them there\n    const {inMotion, columns, freeCells, home} = this.getLastState();\n    if (inMotion) {\n      return; // can't autocomplete when holding a card\n    }\n\n    columns.forEach((column, index) => {\n      if (!column.length) {\n        return;\n      }\n      const lastCard = column.slice(-1)[0];\n      switch (lastCard.suit) {\n        case '@': // TODO: fix hardcoding\n          [\n            this.handleColumnClick(index)(column.length-1),\n            this.handleFlowerClick,\n          ].reduce((p, f) => p.then(f), Promise.resolve());\n          break;\n        case 'A':\n        case 'B':\n        case 'C':\n          // find home column that matches suit\n          let homeIndex = home\n            .map((cell, index) => cell.suit === lastCard.suit ? index : null)\n            .filter(x => x !== null)[0];\n          if (! (home[homeIndex].value + 1 === lastCard.value)) {\n            return;\n          }\n          [\n            this.handleColumnClick(index)(column.length-1),\n            this.handleHomeCellClick(homeIndex)\n          ].reduce((p, f) => p.then(f), Promise.resolve());\n          break;\n        default:\n          break;\n      }\n    })\n\n    freeCells.forEach((freeCell, index) => {\n      if (!freeCell) {\n        return;\n      }\n      switch (freeCell.suit) {\n        case '@': // TODO: fix hardcoding\n          [\n            this.handleFreeCellClick(index),\n            this.handleFlowerClick,\n          ].reduce((p, f) => p.then(f), Promise.resolve());\n          break;\n        case 'A':\n        case 'B':\n        case 'C':\n          // find home column that matches suit\n          let homeIndex = home\n            .map((cell, index) => cell.suit === freeCell.suit ? index : null)\n            .filter(x => x !== null)[0];\n          if (! (home[homeIndex].value + 1 === freeCell.value)) {\n            return;\n          }\n          [\n            this.handleFreeCellClick(index),\n            this.handleHomeCellClick(homeIndex)\n          ].reduce((p, f) => p.then(f), Promise.resolve());\n          break;\n        default:\n          break;\n      }\n    })\n  }\n\n  render() {\n    const {columns, freeCells, flower, home, inMotion} = this.getLastState();\n    const isWin = this.isWinningState();\n    return (\n      <div>\n        <Table>\n          <tr>\n            <td>\n              <Table>\n                <tr>\n                  {freeCells.map((cell, i) => <td><Cardcomp card={cell} canMove={cell===null || cell.free} onClick={this.handleFreeCellClick(i)} /></td>)}\n                </tr>\n                <tr>\n                  {dragons.map(dragon =>\n                    <td>\n                      <button disabled={!this.allDragonsFree(dragon)} onClick={this.handleDragonsClick(dragon)}>\n                        ^ {dragon}s\n                      </button>\n                    </td>\n                  )}\n                </tr>\n              </Table>  \n            </td>\n            <td>\n              <Table>\n                <tr>\n                  <td><Cardcomp card={flower} canMove={true} onClick={this.handleFlowerClick} /></td>\n                </tr>\n                <tr>\n                  <td>^ @</td>\n                </tr>\n              </Table>\n            </td>\n            <td>\n              <Table>\n                <tr>\n                  {home.map((cell, i) => (cell && <td><Cardcomp card={cell} canMove={true} onClick={this.handleHomeCellClick(i)} /></td>))}\n                </tr>\n              </Table>\n            </td>\n            <td>\n              <button onClick={this.goBackMoves(1)}>undo</button><br/>\n              <button onClick={this.rollBackMoves(1)}>hard undo</button><br/>\n              <button onClick={this.autoComplete}>auto move</button>\n            </td>\n          </tr>\n        </Table>\n\n        <Table>\n          <tr>\n            {columns.map((column, i) => <td><Column cards={column} onCardClick={this.handleColumnClick(i)} /></td>)}\n          </tr>\n        </Table>\n        <div style={{ height: \"2em\" }}></div>\n        {inMotion && <Hand cards={inMotion} />}\n        {isWin && <h1>You win!</h1>}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}