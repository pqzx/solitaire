{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["nSuits","nDragons","nNumbers","nColumns","cardsPerDragon","suitLetters","Array","keys","map","x","toString","toUpperCase","dragonLetters","getSuits","n","slice","getDragons","getNumbers","createDeck","dragons","suits","numbers","fill","_","Card","y","flat","shuffleDeck","cards","reduce","a","v","splice","Math","floor","random","length","deal","numberOfColumns","filter","i","key","getKey","suit","value","free","this","id","isValidChild","card1","card2","Cardcomp","props","card","disabled","canMove","onClick","Hand","Table","children","Column","index","onCardClick","React","Component","Config","state","columns","handleReset","bind","handleChange","handleSubmit","event","preventDefault","setState","target","name","onSubmit","style","textAlign","type","min","onChange","App","getStartingState","numberOfSuits","numberOfDragons","numberOfNumbers","deck","freeCells","home","flower","inMotion","getLastState","history","updateState","lastState","isEqual","rollBackMoves","goBackMoves","handleColumnClick","columnIndex","cardIndex","pickedColumn","isValidMove","newColumn","concat","undefined","newInMotion","newColumns","column","handleFreeCellClick","cellIndex","cell","newCellState","newFreeCells","handleHomeCellClick","newHomeState","handleFlowerClick","newflower","allDragonsFree","dragon","freeDragons","some","handleDragonsClick","freeCellsNoDragon","freeIndex","indexOf","isWinningState","every","col","autoComplete","getHomeIndex","canGoHome","homeIndex","forEach","lastCard","p","f","then","Promise","resolve","freeCell","newGame","settings","resetGame","updateSettingsAndRestart","Number","toggleConfig","config","isWin","colSpan","height","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4896514f.chunk.js","sourcesContent":["import React from 'react';\nimport { isEqual } from 'lodash';\nimport './App.css';\n\n// game default quantities\nconst nSuits = 3;\nconst nDragons = 3;\nconst nNumbers = 10;\nconst nColumns = 8;\nconst cardsPerDragon = 4; // number of cards for each dragon\n\nconst suitLetters = [...Array(26).keys()].map(x => (x+10).toString(36).toUpperCase());\nconst dragonLetters = [...Array(26).keys()].map(x => (35-x).toString(36).toUpperCase());\n\nconst getSuits = n => suitLetters.slice(0, n);\nconst getDragons = n => dragonLetters.slice(0, n);\nconst getNumbers = n => [...Array(n).keys()].slice(1);\n\nconst createDeck = (dragons, cardsPerDragon, suits, numbers) => {\n  // a deck is made up of 4 of each dragon, 1-9 for each suit and a flower card\n  const cards = [\n    dragons.map(x => Array(cardsPerDragon).fill(0).map(_ => new Card(x))),\n    suits.map(x => numbers.map(y => new Card(x, y))),\n    new Card('@'), // flower card\n  ].flat(2);\n  return cards;\n}\n\nconst shuffleDeck = cards => {\n  // https://stackoverflow.com/questions/6274339/how-can-i-shuffle-an-array\n  return cards.reduce((a, v) => a.splice(Math.floor(Math.random() * a.length), 0, v) && a, []);\n}\n\nconst deal = (cards, numberOfColumns) => {\n  // send cards to number of columns\n  const cols = [...Array(numberOfColumns).keys()];\n  const board = cols.map(x => cards.filter((_, i) => (i + x) % numberOfColumns === 0));\n  return board;\n}\n\nlet key = 0;\nconst getKey = () => ++key;\n\nclass Card {\n  constructor(suit, value=0, free=true) {\n    this.suit = suit;\n    this.value = value;\n    this.free = free;\n    this.id = getKey();\n  }\n}\n\n// card1 is valid child of card2: this means card1 and card2 are both numeric cards with different suits\n// and card1's value is exactly 1 less than card2's value\nconst isValidChild = (card1, card2) =>\n  card1.suit !== card2.suit && card1.value !== 0 && card1.value === card2.value-1;\n\nconst Cardcomp = props => {\n  if (props.card) {\n    return (\n      <button disabled={!props.canMove} onClick={props.onClick}>\n        {props.card.suit}{props.card.value || ''}\n      </button>\n    )\n  }\n  return (\n    <button onClick={props.onClick}>\n      Empty\n    </button>\n  )\n}\n\nconst Hand = props => \n  <ul>\n    {props.cards.map(card => <li key={card.id}><Cardcomp card={card} canMove={false} /></li>)}\n  </ul>  \n\nconst Table = ({children}) =>\n  <table>\n    <tbody>\n      {children}\n    </tbody>\n  </table>\n\nclass Column extends React.Component {\n  canMove(index) {\n    return index === (this.props.cards.length - 1) || \n      (isValidChild(this.props.cards[index+1], this.props.cards[index]) && this.canMove(index + 1));\n  }\n  \n  render() {\n    const cards = this.props.cards;\n    return (\n      <ul>\n        {\n          (cards.length && \n            cards.map((card, i) => \n            <li key={card.id}><Cardcomp card={card} canMove={this.canMove(i)} onClick={this.props.onCardClick(i)} /></li>))\n          || <li key={'0'}><Cardcomp card={null} onClick={this.props.onCardClick(0)} /></li>\n        }\n      </ul>\n    )\n  }\n}\n\nclass Config extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      columns: nColumns,\n      suits: nSuits,\n      dragons: nDragons,\n      numbers: nNumbers,\n      cardsPerDragon: cardsPerDragon,\n    }\n\n    this.handleReset = this.handleReset.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(event) {\n    const {dragons, suits, numbers, columns, cardsPerDragon} = this.state;\n    this.props.handleSubmit(suits, dragons, columns, numbers, cardsPerDragon);\n    event.preventDefault();\n  }\n\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  handleReset() {\n    this.setState({\n        columns: nColumns,\n        suits: nSuits,\n        dragons: nDragons,\n        numbers: nNumbers,\n    });\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit} >\n        <table>\n          <tbody style={{ textAlign: \"right\" }}>\n            <tr>\n              <td>\n                <label>Suits: </label>\n                <input type=\"number\" name=\"suits\" min=\"0\" value={this.state.suits} onChange={this.handleChange} />\n              </td>\n              <td>\n                <label>Dragons: </label>\n                <input type=\"number\" name=\"dragons\" min=\"0\" value={this.state.dragons} onChange={this.handleChange} />\n              </td>\n              <td>\n                <label>Columns: </label>\n                <input type=\"number\" name=\"columns\" min=\"0\" value={this.state.columns} onChange={this.handleChange}/>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <label>Cards/suit: </label>\n                <input type=\"number\" name=\"numbers\" min=\"0\" value={this.state.numbers} onChange={this.handleChange} />\n              </td>\n              <td>\n                <label>Cards/dragon: </label>\n                <input type=\"number\" name=\"cardsPerDragon\" min=\"0\" value={this.state.cardsPerDragon} onChange={this.handleChange} />\n              </td>\n              <td>\n                <input type=\"submit\" value=\"Save & restart\" />\n                <button type=\"button\" onClick={this.handleReset}>Defaults</button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </form>\n    )\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const {state, dragons, suits} = this.getStartingState(nSuits, nDragons, nColumns, nNumbers, cardsPerDragon);\n\n    this.state = {\n      history: [state],\n      dragons,\n      suits,\n      cardsPerDragon: cardsPerDragon,\n      settings: {\n        nSuits: nSuits,\n        nDragons: nDragons,\n        nColumns: nColumns,\n        nNumbers: nNumbers,\n        cardsPerDragon: cardsPerDragon,\n      },\n    }\n    this.updateSettingsAndRestart = this.updateSettingsAndRestart.bind(this);\n  }\n\n  getStartingState = (numberOfSuits, numberOfDragons, numberOfColumns, numberOfNumbers, cardsPerDragon) => {\n    const suits = getSuits(numberOfSuits);\n    const dragons = getDragons(numberOfDragons);\n    const numbers = getNumbers(numberOfNumbers);\n\n    const deck = createDeck(dragons, cardsPerDragon, suits, numbers);\n    const columns = deal(shuffleDeck(deck), numberOfColumns);\n    const freeCells = Array(numberOfDragons).fill(null);\n    const home = suits.map(suit => new Card(suit, 0));\n\n    const state = {\n      columns,\n      freeCells,\n      home,\n      flower: null,\n      inMotion: null,\n    }\n\n    return {state, dragons, suits};\n  }\n\n  getLastState = () => this.state.history.slice(-1)[0];\n\n  updateState = (state) => {\n    const {history} = this.state;\n    const lastState = history.slice(-1)[0];\n    if (isEqual(state, lastState)) {\n      return;\n    }\n    this.setState({\n      history: [...history, state]\n    });\n  }\n\n  rollBackMoves = n => () => {\n    // hard rewind to a previous state, subsequent states are lost\n    const history = this.state.history.slice(0,-n);\n    if (history.length < 1) {\n      return;\n    }\n    this.setState({\n      history: history,\n    });\n  }\n\n  goBackMoves = n => () => {\n    // previous state is accessed by adding to end of history\n    const state = this.state.history.slice(-n-1)[0];\n    this.updateState(state);\n  }\n\n  handleColumnClick = columnIndex => cardIndex => () =>{\n    const {columns, inMotion, ...state} = this.getLastState();\n    const pickedColumn = columns[columnIndex];\n    const card1 = (inMotion && inMotion[0]) || null;\n    const card2 = pickedColumn[cardIndex];\n\n    const isValidMove = () =>\n      (pickedColumn.length - 1 === cardIndex && isValidChild(card1, card2)) ||\n      pickedColumn.length === 0;\n\n    const newColumn = inMotion\n    ? isValidMove()\n      ? pickedColumn.concat(inMotion)\n      : pickedColumn\n    : pickedColumn.filter((_, i) => i < cardIndex) || [undefined];\n\n    const newInMotion = inMotion\n    ? isValidMove()\n      ? null\n      : inMotion\n    : pickedColumn.slice(cardIndex, pickedColumn.length);\n\n    const newColumns = columns.map((column, i) =>\n      columnIndex === i\n      ? newColumn\n      : column\n    )\n\n    this.updateState({\n      inMotion: newInMotion,\n      columns: newColumns,\n      ...state,\n    })\n  }\n\n  handleFreeCellClick = cellIndex => () => {\n    // if cell is empty and inMotion card length = 1, move inmotion into cell\n    // if cell is occupied and no inmotion cards, move card into inMotion * caveat doesn't work if cell contains set of dragons\n    // if cell is occupied and inMotion cards in play, do nothing\n    const {freeCells, inMotion, ...state} = this.getLastState()\n    const cell = freeCells[cellIndex];  \n    \n    const newCellState = (!cell && inMotion && inMotion.length === 1 && inMotion[0]) || \n      (inMotion && cell) ||\n      null;\n    const newInMotion = \n      (cell && inMotion) || // cell already occupied\n      (inMotion && inMotion.length > 1 && inMotion) || // hand too big to move into cell\n      (cell && [cell]) || // hand free to take cell\n      null;\n\n    const newFreeCells = freeCells.map((cell, i) => i === cellIndex ? newCellState : cell);\n\n    this.updateState({\n      freeCells: newFreeCells,\n      inMotion: newInMotion,\n      ...state,\n    })\n  }\n\n  handleHomeCellClick = cellIndex => () => {\n    const {home, inMotion, ...state} = this.getLastState()\n\n    if (!inMotion || inMotion.length !== 1) {\n      return;\n    }\n\n    const cell = home[cellIndex];\n    const card = inMotion[0];\n\n    const isValidMove = card && card.suit === cell.suit && card.value === (cell.value + 1);\n\n    const newCellState = (isValidMove && card) || cell;\n    const newInMotion = (!isValidMove && inMotion) || null;\n\n    const newHomeState = home.map((cell, i) => i === cellIndex ? newCellState : cell);\n\n    this.updateState({\n      home: newHomeState,\n      inMotion: newInMotion,\n      ...state,\n    })\n  }\n\n  handleFlowerClick = () => {\n    const {inMotion, flower, ...state} = this.getLastState()\n    if (!inMotion || inMotion[0].suit !== '@') {\n      return;\n    };\n\n    const newflower = inMotion[0];\n    const newInMotion = null;\n\n    this.updateState({\n      flower: newflower,\n      inMotion: newInMotion,\n      ...state,\n    });\n  }\n\n  allDragonsFree = dragon => {\n    const {freeCells, columns, inMotion} = this.getLastState();\n    const {cardsPerDragon} = this.state;\n    const freeCards = freeCells.concat(columns.map(column => column.slice(-1)[0]));\n    const freeDragons = freeCards.filter(card => card && card.suit === dragon);\n    return !inMotion && \n      freeDragons.length === cardsPerDragon && \n      freeCells.some(cell => cell === null || cell.suit === dragon);\n  }\n\n  handleDragonsClick = dragon => () => {\n    const {freeCells, columns, ...state} = this.getLastState();\n\n    // remove all dragon cards from table\n    const freeCellsNoDragon = freeCells.map(cell => cell && cell.suit === dragon ? null : cell);\n    const newColumns = columns.map(column =>\n      column.length && column[column.length-1].suit === dragon\n      ? column.slice(0, -1)\n      : column\n    );\n\n    // fill first free freeCell with dragons and make unmoveable\n    const freeIndex = freeCellsNoDragon.indexOf(null);\n    const newFreeCells = freeCellsNoDragon.map((cell, i) => i === freeIndex ? new Card(`${dragon}*`, 0, false) : cell);\n\n    this.updateState({\n      freeCells: newFreeCells,\n      columns: newColumns,\n      ...state,\n    });\n  }\n\n  isWinningState = () => {\n    const {columns, inMotion} = this.getLastState()\n    return !inMotion && columns.every(col => col.length===0);\n  }\n\n  autoComplete = () => {\n    // when free cards on the table are the next card for home spots, move them there\n    const {inMotion, columns, freeCells, home} = this.getLastState();\n    if (inMotion) {\n      return; // can't autocomplete when holding a card\n    }\n\n    const getHomeIndex = (card) =>\n      home.map(cell => cell.suit).indexOf(card.suit);\n\n    const canGoHome = (homeIndex, card) => {\n      const homeCard = home[homeIndex];\n      return homeCard.value + 1 === card.value;\n    }\n\n    columns.forEach((column, index) => {\n      if (!column.length) {\n        return;\n      }\n      const lastCard = column.slice(-1)[0];\n      if (lastCard.suit === '@') {\n        [\n          this.handleColumnClick(index)(column.length-1),\n          this.handleFlowerClick,\n        ].reduce((p, f) => p.then(f), Promise.resolve());\n        return;\n      }\n\n      const homeIndex = getHomeIndex(lastCard);\n      if (homeIndex < 0) {\n        return;\n      }\n\n      canGoHome(homeIndex, lastCard) &&\n      [\n        this.handleColumnClick(index)(column.length-1),\n        this.handleHomeCellClick(homeIndex)\n      ].reduce((p, f) => p.then(f), Promise.resolve());\n\n    })\n\n    freeCells.forEach((freeCell, index) => {\n      if (!freeCell) {\n        return;\n      }\n\n      if (freeCell.suit === '@') {\n        [\n          this.handleFreeCellClick(index),\n          this.handleFlowerClick,\n        ].reduce((p, f) => p.then(f), Promise.resolve());\n        return;\n      }\n\n      const homeIndex = getHomeIndex(freeCell);\n      if (homeIndex < 0) {\n        return;\n      }\n\n      canGoHome(homeIndex, freeCell) &&\n      [\n        this.handleFreeCellClick(index),\n        this.handleHomeCellClick(homeIndex)\n      ].reduce((p, f) => p.then(f), Promise.resolve());\n    })\n  }\n\n  newGame = () => {\n    const {nSuits, nDragons, nColumns, nNumbers, cardsPerDragon} = this.state.settings;\n    const {state, dragons, suits} = this.getStartingState(nSuits, nDragons, nColumns, nNumbers, cardsPerDragon);\n\n    this.setState({\n      history: [state],\n      dragons,\n      suits,\n      cardsPerDragon: cardsPerDragon,\n    });\n  }\n\n  resetGame = () => {\n    const {history} = this.state;\n    const state = history[0];\n    this.updateState(state);\n  }\n\n  updateSettingsAndRestart = (nSuits, nDragons, nColumns, nNumbers, cardsPerDragon) => {\n    const settings = {\n      nSuits: Number(nSuits),\n      nDragons: Number(nDragons),\n      nColumns: Number(nColumns),\n      nNumbers: Number(nNumbers),\n      cardsPerDragon: Number(cardsPerDragon),\n    }\n    this.setState({settings}, this.newGame);\n  }\n\n  toggleConfig = () => {\n    const {config} = this.state;\n    this.setState({\n      config: !config,\n    })\n  }\n\n  render() {\n    const {columns, freeCells, flower, home, inMotion} = this.getLastState();\n    const {dragons} = this.state;\n    const isWin = this.isWinningState();\n    return (\n      <div>\n        {this.state.config && <Config handleSubmit={this.updateSettingsAndRestart}/>}\n        <Table>\n          <tr>\n            <td>\n              <Table>\n                <tr>\n                  {freeCells.map((cell, i) => <td><Cardcomp card={cell} canMove={cell===null || cell.free} onClick={this.handleFreeCellClick(i)} /></td>)}\n                </tr>\n                <tr>\n                  {dragons.map(dragon =>\n                    <td>\n                      <button disabled={!this.allDragonsFree(dragon)} onClick={this.handleDragonsClick(dragon)}>\n                        ^ {dragon}s\n                      </button>\n                    </td>\n                  )}\n                </tr>\n              </Table>  \n            </td>\n            <td>\n              <Table>\n                <tr>\n                  <td><Cardcomp card={flower} canMove={true} onClick={this.handleFlowerClick} /></td>\n                </tr>\n                <tr>\n                  <td>^ @</td>\n                </tr>\n              </Table>\n            </td>\n            <td>\n              <Table>\n                <tr>\n                  {home.map((cell, i) => (cell && <td><Cardcomp card={cell} canMove={true} onClick={this.handleHomeCellClick(i)} /></td>))}\n                </tr>\n              </Table>\n            </td>\n            <td>\n              <button onClick={this.resetGame}>reset game</button>\n              <button onClick={this.newGame}>new game</button><br/>\n              <button onClick={this.goBackMoves(1)}>\"undo\"</button>\n              <button onClick={this.rollBackMoves(1)}>undo</button><br/>\n              <button onClick={this.autoComplete}>auto move</button>\n              <button onClick={this.toggleConfig}>settings</button>\n            </td>\n          </tr>\n          <tr>\n            <td colSpan={3}>\n              <Table>\n                <tr>\n                  {columns.map((column, i) => <td><Column cards={column} onCardClick={this.handleColumnClick(i)} /></td>)}\n                </tr>\n              </Table>\n            </td>\n          </tr>\n        </Table>\n        <div style={{ height: \"2em\" }}></div>\n        {inMotion && <Hand cards={inMotion} />}\n        {isWin && <h1>You win!</h1>}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}