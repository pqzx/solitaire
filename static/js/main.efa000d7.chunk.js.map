{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["nSuits","nDragons","nNumbers","nColumns","perDragon","suitLetters","Array","keys","map","x","toString","toUpperCase","dragonLetters","getSuits","n","slice","getDragons","getNumbers","createDeck","dragons","cardsPerDragon","suits","numbers","fill","_","Card","y","flat","shuffleDeck","cards","reduce","a","v","splice","Math","floor","random","length","deal","numberOfColumns","filter","i","key","getKey","suit","value","free","this","id","isValidChild","card1","card2","Cardcomp","props","card","disabled","canMove","onClick","Hand","Table","children","Column","index","onCardClick","React","Component","Config","state","columns","handleReset","bind","handleChange","handleSubmit","event","settings","numberOfDragons","numberOfSuits","numberOfNumbers","numberPerDragon","preventDefault","setState","target","name","onSubmit","style","type","min","onChange","App","getStartingState","deck","freeCells","home","flower","inMotion","getLastState","history","updateState","lastState","isEqual","rollBackMoves","goBackMoves","handleColumnClick","columnIndex","cardIndex","pickedColumn","isValidMove","newColumn","concat","undefined","newInMotion","newColumns","column","handleFreeCellClick","cellIndex","cell","newCellState","newFreeCells","handleHomeCellClick","newHomeState","handleFlowerClick","newflower","allDragonsFree","dragon","freeDragons","some","handleDragonsClick","freeCellsNoDragon","freeIndex","indexOf","isWinningState","every","col","autoComplete","getHomeIndex","canGoHome","homeIndex","forEach","lastCard","p","f","then","Promise","resolve","freeCell","newGame","Boolean","String","Number","resetGame","toggleConfig","config","isWin","colSpan","height","isLocalhost","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.efa000d7.chunk.js","sourcesContent":["import React from 'react';\nimport { isEqual } from 'lodash';\nimport './App.css';\n\n// game default quantities\nconst nSuits = 3;\nconst nDragons = 3;\nconst nNumbers = 10;\nconst nColumns = 8;\nconst perDragon = 4; // number of cards for each dragon\n\nconst suitLetters = [...Array(26).keys()].map(x => (x+10).toString(36).toUpperCase());\nconst dragonLetters = [...Array(26).keys()].map(x => (35-x).toString(36).toUpperCase());\n\nconst getSuits = n => suitLetters.slice(0, n);\nconst getDragons = n => dragonLetters.slice(0, n);\nconst getNumbers = n => [...Array(n).keys()].slice(1);\n\nconst createDeck = (dragons, cardsPerDragon, suits, numbers) => {\n  // a deck is made up of 4 of each dragon, 1-9 for each suit and a flower card\n  const cards = [\n    dragons.map(x => Array(cardsPerDragon).fill(0).map(_ => new Card(x))),\n    suits.map(x => numbers.map(y => new Card(x, y))),\n    new Card('@'), // flower card\n  ].flat(2);\n  return cards;\n}\n\nconst shuffleDeck = cards => {\n  // https://stackoverflow.com/questions/6274339/how-can-i-shuffle-an-array\n  return cards.reduce((a, v) => a.splice(Math.floor(Math.random() * a.length), 0, v) && a, []);\n}\n\nconst deal = (cards, numberOfColumns) => {\n  // send cards to number of columns\n  const cols = [...Array(numberOfColumns).keys()];\n  const board = cols.map(x => cards.filter((_, i) => (i + x) % numberOfColumns === 0));\n  return board;\n}\n\nlet key = 0;\nconst getKey = () => ++key;\n\nclass Card {\n  constructor(suit, value=0, free=true) {\n    this.suit = suit;\n    this.value = value;\n    this.free = free;\n    this.id = getKey();\n  }\n}\n\n// card1 is valid child of card2: this means card1 and card2 are both numeric cards with different suits\n// and card1's value is exactly 1 less than card2's value\nconst isValidChild = (card1, card2) =>\n  card1.suit !== card2.suit && card1.value !== 0 && card1.value === card2.value-1;\n\nconst Cardcomp = props => {\n  if (props.card) {\n    return (\n      <button disabled={!props.canMove} onClick={props.onClick}>\n        {props.card.suit}{props.card.value || ''}\n      </button>\n    )\n  }\n  return (\n    <button onClick={props.onClick}>\n      Empty\n    </button>\n  )\n}\n\nconst Hand = props => \n  <ul>\n    {props.cards.map(card => <li key={card.id}><Cardcomp card={card} canMove={false} /></li>)}\n  </ul>  \n\nconst Table = ({children}) =>\n  <table>\n    <tbody>\n      {children}\n    </tbody>\n  </table>\n\nclass Column extends React.Component {\n  canMove(index) {\n    return index === (this.props.cards.length - 1) || \n      (isValidChild(this.props.cards[index+1], this.props.cards[index]) && this.canMove(index + 1));\n  }\n  \n  render() {\n    const cards = this.props.cards;\n    return (\n      <ul>\n        {\n          (cards.length && \n            cards.map((card, i) => \n            <li key={card.id}><Cardcomp card={card} canMove={this.canMove(i)} onClick={this.props.onCardClick(i)} /></li>))\n          || <li key={'0'}><Cardcomp card={null} onClick={this.props.onCardClick(0)} /></li>\n        }\n      </ul>\n    )\n  }\n}\n\nclass Config extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      columns: nColumns,\n      suits: nSuits,\n      dragons: nDragons,\n      numbers: nNumbers,\n      cardsPerDragon: perDragon,\n    }\n\n    this.handleReset = this.handleReset.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(event) {\n    const {dragons, suits, numbers, columns, cardsPerDragon} = this.state;\n    const settings = {\n      numberOfDragons: dragons,\n      numberOfSuits: suits,\n      numberOfNumbers: numbers,\n      numberOfColumns: columns,\n      numberPerDragon: cardsPerDragon,\n    }\n    this.props.handleSubmit(settings)();\n    event.preventDefault();\n  }\n\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  handleReset() {\n    this.setState({\n        columns: nColumns,\n        suits: nSuits,\n        dragons: nDragons,\n        numbers: nNumbers,\n    });\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit} >\n        <table>\n          <tbody style={{ \"text-align\": \"right\" }}>\n            <tr>\n              <td>\n                <label>Suits: </label>\n                <input type=\"number\" name=\"suits\" min=\"0\" value={this.state.suits} onChange={this.handleChange} />\n              </td>\n              <td>\n                <label>Dragons: </label>\n                <input type=\"number\" name=\"dragons\" min=\"0\" value={this.state.dragons} onChange={this.handleChange} />\n              </td>\n              <td>\n                <label>Columns: </label>\n                <input type=\"number\" name=\"columns\" min=\"0\" value={this.state.columns} onChange={this.handleChange}/>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <label>Cards/suit: </label>\n                <input type=\"number\" name=\"numbers\" min=\"0\" value={this.state.numbers} onChange={this.handleChange} />\n              </td>\n              <td>\n                <label>Cards/dragon: </label>\n                <input type=\"number\" name=\"cardsPerDragon\" min=\"0\" value={this.state.cardsPerDragon} onChange={this.handleChange} />\n              </td>\n              <td>\n                <input type=\"submit\" value=\"Save & restart\" />\n                <button type=\"button\" onClick={this.handleReset}>Defaults</button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </form>\n    )\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const {state, dragons, suits, cardsPerDragon} = this.getStartingState();\n\n    this.state = {\n      history: [state],\n      dragons,\n      suits,\n      cardsPerDragon,\n      settings: {},\n    }\n    this.newGame = this.newGame.bind(this);\n  }\n\n  getStartingState = (numberOfSuits=nSuits,\n                   numberOfDragons=nDragons,\n                   numberOfNumbers=nNumbers,\n                   numberOfColumns=nColumns,\n                   cardsPerDragon=perDragon) => {\n\n    const suits = getSuits(numberOfSuits);\n    const dragons = getDragons(numberOfDragons);\n    const numbers = getNumbers(numberOfNumbers);\n\n    const deck = createDeck(dragons, cardsPerDragon, suits, numbers);\n    const columns = deal(shuffleDeck(deck), numberOfColumns);\n    const freeCells = Array(numberOfDragons).fill(null);\n    const home = suits.map(suit => new Card(suit, 0));\n\n    const state = {\n      columns,\n      freeCells,\n      home,\n      flower: null,\n      inMotion: null,\n    }\n\n    return {state, dragons, suits, cardsPerDragon};\n  }\n\n  getLastState = () => this.state.history.slice(-1)[0];\n\n  updateState = (state) => {\n    const {history} = this.state;\n    const lastState = history.slice(-1)[0];\n    if (isEqual(state, lastState)) {\n      return;\n    }\n    this.setState({\n      history: [...history, state]\n    });\n  }\n\n  rollBackMoves = n => () => {\n    // hard rewind to a previous state, subsequent states are lost\n    const history = this.state.history.slice(0,-n);\n    if (history.length < 1) {\n      return;\n    }\n    this.setState({\n      history: history,\n    });\n  }\n\n  goBackMoves = n => () => {\n    // previous state is accessed by adding to end of history\n    const state = this.state.history.slice(-n-1)[0];\n    this.updateState(state);\n  }\n\n  handleColumnClick = columnIndex => cardIndex => () =>{\n    const {columns, inMotion, ...state} = this.getLastState();\n    const pickedColumn = columns[columnIndex];\n    const card1 = (inMotion && inMotion[0]) || null;\n    const card2 = pickedColumn[cardIndex];\n\n    const isValidMove = () =>\n      (pickedColumn.length - 1 === cardIndex && isValidChild(card1, card2)) ||\n      pickedColumn.length === 0;\n\n    const newColumn = inMotion\n    ? isValidMove()\n      ? pickedColumn.concat(inMotion)\n      : pickedColumn\n    : pickedColumn.filter((_, i) => i < cardIndex) || [undefined];\n\n    const newInMotion = inMotion\n    ? isValidMove()\n      ? null\n      : inMotion\n    : pickedColumn.slice(cardIndex, pickedColumn.length);\n\n    const newColumns = columns.map((column, i) =>\n      columnIndex === i\n      ? newColumn\n      : column\n    )\n\n    this.updateState({\n      inMotion: newInMotion,\n      columns: newColumns,\n      ...state,\n    })\n  }\n\n  handleFreeCellClick = cellIndex => () => {\n    // if cell is empty and inMotion card length = 1, move inmotion into cell\n    // if cell is occupied and no inmotion cards, move card into inMotion * caveat doesn't work if cell contains set of dragons\n    // if cell is occupied and inMotion cards in play, do nothing\n    const {freeCells, inMotion, ...state} = this.getLastState()\n    const cell = freeCells[cellIndex];  \n    \n    const newCellState = (!cell && inMotion && inMotion.length === 1 && inMotion[0]) || \n      (inMotion && cell) ||\n      null;\n    const newInMotion = \n      (cell && inMotion) || // cell already occupied\n      (inMotion && inMotion.length > 1 && inMotion) || // hand too big to move into cell\n      (cell && [cell]) || // hand free to take cell\n      null;\n\n    const newFreeCells = freeCells.map((cell, i) => i === cellIndex ? newCellState : cell);\n\n    this.updateState({\n      freeCells: newFreeCells,\n      inMotion: newInMotion,\n      ...state,\n    })\n  }\n\n  handleHomeCellClick = cellIndex => () => {\n    const {home, inMotion, ...state} = this.getLastState()\n\n    if (!inMotion || inMotion.length !== 1) {\n      return;\n    }\n\n    const cell = home[cellIndex];\n    const card = inMotion[0];\n\n    const isValidMove = card && card.suit === cell.suit && card.value === (cell.value + 1);\n\n    const newCellState = (isValidMove && card) || cell;\n    const newInMotion = (!isValidMove && inMotion) || null;\n\n    const newHomeState = home.map((cell, i) => i === cellIndex ? newCellState : cell);\n\n    this.updateState({\n      home: newHomeState,\n      inMotion: newInMotion,\n      ...state,\n    })\n  }\n\n  handleFlowerClick = () => {\n    const {inMotion, flower, ...state} = this.getLastState()\n    if (!inMotion || inMotion[0].suit !== '@') {\n      return;\n    };\n\n    const newflower = inMotion[0];\n    const newInMotion = null;\n\n    this.updateState({\n      flower: newflower,\n      inMotion: newInMotion,\n      ...state,\n    });\n  }\n\n  allDragonsFree = dragon => {\n    const {freeCells, columns, inMotion} = this.getLastState();\n    const {cardsPerDragon} = this.state;\n    const freeCards = freeCells.concat(columns.map(column => column.slice(-1)[0]));\n    const freeDragons = freeCards.filter(card => card && card.suit === dragon);\n    return !inMotion && \n      freeDragons.length === cardsPerDragon && \n      freeCells.some(cell => cell === null || cell.suit === dragon);\n  }\n\n  handleDragonsClick = dragon => () => {\n    const {freeCells, columns, ...state} = this.getLastState();\n\n    // remove all dragon cards from table\n    const freeCellsNoDragon = freeCells.map(cell => cell && cell.suit === dragon ? null : cell);\n    const newColumns = columns.map(column =>\n      column.length && column[column.length-1].suit === dragon\n      ? column.slice(0, -1)\n      : column\n    );\n\n    // fill first free freeCell with dragons and make unmoveable\n    const freeIndex = freeCellsNoDragon.indexOf(null);\n    const newFreeCells = freeCellsNoDragon.map((cell, i) => i === freeIndex ? new Card(`${dragon}*`, 0, false) : cell);\n\n    this.updateState({\n      freeCells: newFreeCells,\n      columns: newColumns,\n      ...state,\n    });\n  }\n\n  isWinningState = () => {\n    const {columns, inMotion} = this.getLastState()\n    return !inMotion && columns.every(col => col.length===0);\n  }\n\n  autoComplete = () => {\n    // when free cards on the table are the next card for home spots, move them there\n    const {inMotion, columns, freeCells, home} = this.getLastState();\n    const {suits} = this.state;\n    if (inMotion) {\n      return; // can't autocomplete when holding a card\n    }\n\n    const getHomeIndex = (card) =>\n      home.map(cell => cell.suit).indexOf(card.suit);\n\n    const canGoHome = (homeIndex, card) => {\n      const homeCard = home[homeIndex];\n      return homeCard.value + 1 === card.value;\n    }\n\n    columns.forEach((column, index) => {\n      if (!column.length) {\n        return;\n      }\n      const lastCard = column.slice(-1)[0];\n      if (lastCard.suit === '@') {\n        [\n          this.handleColumnClick(index)(column.length-1),\n          this.handleFlowerClick,\n        ].reduce((p, f) => p.then(f), Promise.resolve());\n        return;\n      }\n\n      const homeIndex = getHomeIndex(lastCard);\n      if (homeIndex < 0) {\n        return;\n      }\n\n      canGoHome(homeIndex, lastCard) &&\n      [\n        this.handleColumnClick(index)(column.length-1),\n        this.handleHomeCellClick(homeIndex)\n      ].reduce((p, f) => p.then(f), Promise.resolve());\n\n    })\n\n    freeCells.forEach((freeCell, index) => {\n      if (!freeCell) {\n        return;\n      }\n\n      if (freeCell.suit === '@') {\n        [\n          this.handleFreeCellClick(index),\n          this.handleFlowerClick,\n        ].reduce((p, f) => p.then(f), Promise.resolve());\n        return;\n      }\n\n      const homeIndex = getHomeIndex(freeCell);\n      if (homeIndex < 0) {\n        return;\n      }\n\n      canGoHome(homeIndex, freeCell) &&\n      [\n        this.handleFreeCellClick(index),\n        this.handleHomeCellClick(homeIndex)\n      ].reduce((p, f) => p.then(f), Promise.resolve());\n    })\n  }\n\n  newGame = (settings) => () => {\n    let {\n      numberOfSuits,\n      numberOfDragons,\n      numberOfNumbers,\n      numberOfColumns,\n      numberPerDragon,\n    } = settings;\n\n    numberOfSuits = Boolean(String(numberOfSuits)) ? Number(numberOfSuits) : nSuits;\n    numberOfDragons = Boolean(String(numberOfDragons)) ? Number(numberOfDragons) : nDragons;\n    numberOfNumbers = Boolean(String(numberOfNumbers)) ? Number(numberOfNumbers) : nNumbers;\n    numberOfColumns = Boolean(String(numberOfColumns)) ? Number(numberOfColumns) : nColumns;\n    numberPerDragon = Boolean(String(numberPerDragon)) ? Number(numberPerDragon) : perDragon;\n    \n    const {state, dragons, suits, cardsPerDragon} = this.getStartingState(\n      numberOfSuits,\n      numberOfDragons,\n      numberOfNumbers,\n      numberOfColumns,\n      numberPerDragon,\n    );\n\n    this.setState({\n      history: [state],\n      dragons,\n      suits,\n      cardsPerDragon,\n      settings: {\n        numberOfSuits,\n        numberOfDragons,\n        numberOfNumbers,\n        numberOfColumns,\n        numberPerDragon,\n      }\n    });\n  }\n\n  resetGame = () => {\n    const {history} = this.state;\n    const state = history[0];\n    this.updateState(state);\n  }\n\n  toggleConfig = () => {\n    const {config} = this.state;\n    this.setState({\n      config: !config,\n    })\n  }\n\n  render() {\n    const {columns, freeCells, flower, home, inMotion} = this.getLastState();\n    const {dragons} = this.state;\n    const isWin = this.isWinningState();\n    return (\n      <div>\n        {this.state.config && <Config handleSubmit={this.newGame}/>}\n        <Table>\n          <tr>\n            <td>\n              <Table>\n                <tr>\n                  {freeCells.map((cell, i) => <td><Cardcomp card={cell} canMove={cell===null || cell.free} onClick={this.handleFreeCellClick(i)} /></td>)}\n                </tr>\n                <tr>\n                  {dragons.map(dragon =>\n                    <td>\n                      <button disabled={!this.allDragonsFree(dragon)} onClick={this.handleDragonsClick(dragon)}>\n                        ^ {dragon}s\n                      </button>\n                    </td>\n                  )}\n                </tr>\n              </Table>  \n            </td>\n            <td>\n              <Table>\n                <tr>\n                  <td><Cardcomp card={flower} canMove={true} onClick={this.handleFlowerClick} /></td>\n                </tr>\n                <tr>\n                  <td>^ @</td>\n                </tr>\n              </Table>\n            </td>\n            <td>\n              <Table>\n                <tr>\n                  {home.map((cell, i) => (cell && <td><Cardcomp card={cell} canMove={true} onClick={this.handleHomeCellClick(i)} /></td>))}\n                </tr>\n              </Table>\n            </td>\n            <td>\n              <button onClick={this.resetGame}>reset game</button>\n              <button onClick={this.newGame(this.state.settings)}>new game</button><br/>\n              <button onClick={this.goBackMoves(1)}>\"undo\"</button>\n              <button onClick={this.rollBackMoves(1)}>undo</button><br/>\n              <button onClick={this.autoComplete}>auto move</button>\n              <button onClick={this.toggleConfig}>settings</button>\n            </td>\n          </tr>\n          <tr>\n            <td colSpan={3}>\n              <Table>\n                <tr>\n                  {columns.map((column, i) => <td><Column cards={column} onCardClick={this.handleColumnClick(i)} /></td>)}\n                </tr>\n              </Table>\n            </td>\n          </tr>\n        </Table>\n        <div style={{ height: \"2em\" }}></div>\n        {inMotion && <Hand cards={inMotion} />}\n        {isWin && <h1>You win!</h1>}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}